// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32+kNhD+V6xpH1kgaZ94alpdq5WubaT0nk6nyDED+IJ/1DZJo4j/vbKBBbKwx0nZ",
	"ViflbZfx+Ptmvm9seAamhFYSpbOQPYNlFQoafl4Zx1mN/qc2SqNxHEOACtVId6sK/8c9aYQMrDNcltBG",
	"QI275flCqI3A4N8NN5hD9nFYF022+xQNOeruMzLnt9vLB5ROmadjHnwa4g5FePq9wQIy+C4ZC0v6qpIb",
	"p9i937WHocbQp8DsCPd3tJaWC9WLMXC6wGHhUlV/mhzN8d6yEXfdc8ElF42A7OKQzaXDEo1P10blDXO3",
	"kooNRGarowFkidZ1t/KYGFPSUS5vaecJu7njg4nayJe071IuXgoQwbZKwqoTxDt9j9jrsaxTXIfq2wjs",
	"sNFBh/RYh+U2w5D9JZ52lej29s7q3uTr6wnE64Bvw73Bul5xvfKPt8N2u5w21AtpeoQlRVYss3qKrVp1",
	"YpqNB18/j2tu8XlcFuowf52DUVBeQwZ3aO5LdZ+j/Kn0j2KmhGeRo2WGa8eVhAz+qrgl3BJXITmcl+Tq",
	"eg8R1JyhtKGWria40pRVSC7jFCJojIepnNNZkjw+PsY0RGNlyqRPtcn7/S/v/rh5t7uM07hyog5m4M5f",
	"G+PR3eM9oLEdq4s4jVO/VGmUVHPI4Ic4jS8gAk1dFRRIZsd7iaH4eXG/oSOsMQalG4uDsKuhfs0+71bt",
	"J0GDVivP3e93maZDe1EGBKp1zVnITj5bDzNcil/y5QgSpJtTtQ1jaG3R1OTAzjfgx1ckMFxZC/DvuXWk",
	"oLzGPPjRNkJQ39nVHv6zYyrHEuXOexet292p/GnXG8X/DheRsgu67KVF4yxRhnzQOXVoSTC5JVyS/apQ",
	"H7RPm2sVoH/2aP+JTKFPqujpwnRwnWmwPaN9Tqj3P5unk9Or2QQ1l420WfQtzmojSKb30eL4B7EOq166",
	"yUevx+DZdDtgfEtT7yN22rtXHvdVVboZn+ny+iN+SpJhwvWcwtuMb5/xUeivddB0rIeXpdXRHl1EHrmr",
	"utPk1JjfjIf2eWe9B/p2B37e0K3KWazr8Ka8eAr4F3xiNTJecMxHKCrzwVPrV79P/tUoce7Lf/wKWehe",
	"qCBESaHM2wmx1J0BeNllX+mBTcbzAGgewhfix+f+qyR5SKH91P4bAAD//xUxSxq+EgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
