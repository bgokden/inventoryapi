// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/bMAz9Kwa3o2On3U4+rRu6IUC3Feh6KopClZlErS1potwuKPLfB8pRPhYnc4F2",
	"H0BvTiiS7/E9yn4AaWprNGpPUDwAySnWIjweOa9khfxonbHovMIQELVptL8yY/7hZxahAPJO6QnMUxDO",
	"X6myIzRPweH3RjksobiI59K1cpdpzDHXNyg9lxvpO9TeuNk2DrUeUh7r8O9rh2Mo4FW+IpYvWOVn3shb",
	"rrpoI5wTs4Bsq+9nJBKTDvb1KrCfYDzYxerUmbKRfru6NNoLpa9EO3zqTS2qtUUuBS3qHnDDqT1YaRus",
	"XYv0Ahlp91KgFWvbfbv8tZNoChRL9bRkKBTTtmfCeUqPzVKwVkmshaqggGt0txNzW6J+N+G/MmlqRlEi",
	"SaesV0ZDAd+mihJFiZ9isnRycnQ6ghQqJVFT4NJygiMr5BSTw2wIKTSO20y9t0We39/fZyJEM+Mm+SKV",
	"8pPRh+MvZ8eDw2yYTX1dhaErzwu9WqpFvzt01KI6yIbZkI8ai1pYBQW8yYbZAaRghZ8GBfKNxZtgIL9J",
	"7hP6RDbOofYrchCqOsFnRmV7arQWdEjWMHaudzgcxvGiDh2EtZWSITu/IW4Tr6vf2W7VJEi3CZUaKZFo",
	"3FTJEh0P4O0TAoiXSUf7E0U+GQtVYRn8SE1dC57szhn+GEhT4gT1gL2L5AfXppwNFkbhZ4ZvDXXoMtKE",
	"zlNiXHJuS+GRkmBySpRORjuFOrectqlVaP2eu/0RmcKczHgBF9YX17sG589onz3q/WXztHKymk1Qs9tI",
	"vUXv46x5Cvn6vd+5/kGs5alf3cTR01Xw2XRb9viftp4jtD67J173naq0O76hy9Ov+D5J4obbTQgvO95/",
	"x1dCP9ZBvNaEVRW+tzq9dIZVlZBFqcYKy3iDCF1GXLtfH5z60Zn65QXyr5kriPo1Nu621qOE7+U1Lo+O",
	"PzqhuHhYfM7mML+c/wwAAP//UJdcTI8OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
